[gd_scene load_steps=9 format=3 uid="uid://dub12avp0i8ud"]

[ext_resource type="Script" path="res://weapons/wands/wand.gd" id="1_xh8mq"]
[ext_resource type="PackedScene" uid="uid://i3nge2hbvasu" path="res://_abilities/weapon_abilities/weapon_inventory_ability.tscn" id="2_a6c5u"]

[sub_resource type="GDScript" id="GDScript_uhq8u"]
script/source = "extends StateMachine

func _ready() -> void:
	super._ready()

"

[sub_resource type="GDScript" id="GDScript_dpm7t"]
script/source = "extends State

var wand: Wand

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	print(\"%s 进入 Idle 状态\" % wand.name)

func update(_delta: float) -> void:
	if wand.trigger_pressed:
		print(\"%s 尝试施法，准备【抽取】法术\" % wand.name)
		emit_signal(\"finished\", \"Draw\")
		
func physics_update(delta: float) -> void:
	wand.recharge(delta)
	
func exit() -> void:
	pass
	#print(\"%s 退出 Idle 状态\" % wand.name)

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_36jsr"]
script/source = "extends State

var wand: Wand
var cast_group: Array[Spell]

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	print(\"%s 进入 Draw 状态\" % wand.name)
	# 1. 如果【牌库】不为空，【弃牌库】为空，则表示为第1次施法
	#if not wand.deck.is_empty() and wand.discared.is_empty():
		##TODO 标记回绕
		#pass
	
	if not wand.deck.is_empty():
		cast_group = draw_spell()
		# 牌库有法术，但是抽取失败，直接进入充能延迟
		if cast_group.is_empty(): 
			print(\"%s 本次抽取未抽取到法术，剩余energe[%f/%f]，进入充能冷却\" % [wand.name, wand.energe, wand.max_energe])
			emit_signal(\"finished\", \"RechargeDelay\")
		else:
			wand.cast_group_stack.push_front(cast_group)
			print(\"%s 本次抽取到法术:%s，剩余energe[%f/%f]，剩余desk:%d，准备【施法】\" % [wand.name, cast_group, wand.energe, wand.max_energe, wand.deck.size()])
			emit_signal(\"finished\", \"Cast\")
	else:
		print(\"%s 牌库为空，准备进入【充能延迟】\" % [wand.name])
		emit_signal(\"finished\", \"RechargeDelay\")


## 抽取法术
func draw_spell() -> Array[Spell]:
	var cast_group: Array[Spell] = []
	
	# 定义本次抽取次数
	var draw = wand.max_cast
	# 暂存当前的剩余 energe
	var remaining_energe = wand.energe
	while draw > 0 and not wand.deck.is_empty():
		# 尝试从【牌库】中抽取一个法术
		var spell := wand.deck.pop_front() as Spell
		# 如果当前的剩余 energe 不足以施放当前抽取的法术
		if spell.energe_drain > remaining_energe:
			wand.discared.append(spell)
			break
		draw += spell.draw_num
		draw -= 1
		cast_group.append(spell)
		
	return cast_group

func exit() -> void:
	pass
	#print(\"%s 退出 Draw 状态\" % wand.name)

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_m5hjy"]
script/source = "extends State

var wand: Wand
var projectiles: Array[Projectile2D]

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	print(\"%s 进入 Cast 状态，当前待施放【施法法术组】:%s\" % [wand.name, wand.cast_group_stack[0]])
	for spell in wand.cast_group_stack[0] as Array[Spell]:
		wand.energe -= spell.energe_drain
		if spell.spell_type == Spell.SpellType.Projectile:
			var p = spell.projectile_scene.instantiate() as Projectile2D
			p.target_position = wand.get_global_mouse_position()
			p.global_position = wand.projectile_spawn.global_position
			projectiles.append(p)
			GameManager.current_level.call_deferred(\"add_child\", p)
	print(\"%s 本次施法完毕\" % [wand.name])
	if wand.deck.is_empty():
		emit_signal(\"finished\", \"RechargeDelay\")
	else:
		emit_signal(\"finished\", \"CastDelay\")

#func update(_delta: float) -> void:
	#for projectile in projectiles:
		#GameManager.current_level.call_deferred(\"add_child\", projectile)
	
func exit() -> void:
	pass

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_om8ju"]
script/source = "extends State

var wand: Wand

var cast_delay: float
var ts: float

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	cast_delay = 0.0
	ts = 0.0
	print(\"%s 进入 CastDelay 状态，上次已施放【施法法术组】cast_group:%s\" % [wand.name, wand.cast_group_stack[0]])
	for spell in wand.cast_group_stack[0]:
		cast_delay += spell.cast_delay
	print(\"%s 合计施法延迟【修正】\\tcast_delay=%f+[%f]=%f\" % [wand.name,
	wand.cast_delay, cast_delay, (wand.cast_delay + cast_delay)])
	cast_delay += wand.cast_delay

func physics_update(delta: float) -> void:
	if ts >= cast_delay:
		if wand.deck.is_empty():
			print(\"%s 施法延迟结束，牌库为空，进入充能冷却状态\" % [wand.name])
			emit_signal(\"finished\", \"RechargeDelay\")
		else:
			print(\"%s 施法延迟结束，先回到Idle状态\" % [wand.name])
			emit_signal(\"finished\", \"Idle\")
	ts += delta
	wand.recharge(delta)
	#print(\"%s 等待施法延迟...[%f/%f]\" % [wand.name, ts, cast_delay])
	
func exit() -> void:
	pass

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_jxwcj"]
script/source = "extends State

var wand: Wand

var recharge_delay: float
var ts: float

func _ready() -> void:
	pass
	
func enter() -> void:
	wand = owner as Wand
	recharge_delay = 0.0
	ts = 0.0
	for cast_group in wand.cast_group_stack:
		for spell in cast_group as Array[Spell]:
			recharge_delay += spell.recharge_time
	recharge_delay += wand.recharge_time
	print(\"%s 进入 RechargeDelay 状态，本轮所有施法组：%s，总计recharge_delay:%f\" % [wand.name, wand.cast_group_stack, recharge_delay])
	

func physics_update(delta: float) -> void:
	if ts >= recharge_delay:
		print(\"%s 充能延迟结束\" % [wand.name])
		wand.reset()
		emit_signal(\"finished\", \"Idle\")
	ts += delta
	#print(\"%s 等待充能延迟...[%f/%f]\" % [wand.name, ts, recharge_delay])
	wand.recharge(delta)
	
func exit() -> void:
	pass

func _exit_tree() -> void:
	pass

"

[node name="Wand" type="Node2D"]
script = ExtResource("1_xh8mq")

[node name="WeaponInventoryAbility" parent="." instance=ExtResource("2_a6c5u")]

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("start_state")]
script = SubResource("GDScript_uhq8u")
start_state = NodePath("Idle")

[node name="Idle" type="Node" parent="StateMachine"]
script = SubResource("GDScript_dpm7t")

[node name="Draw" type="Node" parent="StateMachine"]
script = SubResource("GDScript_36jsr")

[node name="Cast" type="Node" parent="StateMachine"]
script = SubResource("GDScript_m5hjy")

[node name="CastDelay" type="Node" parent="StateMachine"]
script = SubResource("GDScript_om8ju")

[node name="RechargeDelay" type="Node" parent="StateMachine"]
script = SubResource("GDScript_jxwcj")

[node name="Sprite2D" type="Sprite2D" parent="."]
