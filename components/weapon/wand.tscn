[gd_scene load_steps=10 format=3 uid="uid://dub12avp0i8ud"]

[ext_resource type="Script" path="res://components/weapon/wand.gd" id="1_r2q1q"]

[sub_resource type="GDScript" id="GDScript_uhq8u"]
script/source = "extends StateMachine

func _ready() -> void:
	super._ready()

"

[sub_resource type="GDScript" id="GDScript_dpm7t"]
script/source = "extends State

var wand: Wand

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	print(\"%s 进入 Idle 状态\" % wand.name)
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	if wand.trigger_pressed:
		print(\"%s 尝试施法，准备Draw\" % wand.name)
		emit_signal(\"finished\", \"Draw\")
		
func physics_update(delta: float) -> void:
	if not is_active():
		return
	if wand.energe < wand.max_energe:
		# 计算在这个特定帧的时间内应当恢复多少 energe
		# delta 的单位是秒。如果delta是0.016秒（约等于60帧/秒），
		# 那么每帧应该恢复的 energe 为 10 * 0.016 = 0.16 点。
		wand.energe += wand.energe_recharge_speed * delta
		wand.energe = min(wand.energe, wand.max_energe)
	
func exit() -> void:
	print(\"%s 退出 Idle 状态\" % wand.name)
	super.exit()

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_om8ju"]
script/source = "extends State

var wand: Wand

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	print(\"%s -> BeforeUse\" % wand.name)
	#if wand.remaining_cast > 0:
		
	# 判断当前武器是否可以使用
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	
func exit() -> void:
	super.exit()

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_36jsr"]
script/source = "extends State

var wand: Wand
var cast_group: Array[Spell]

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	
	# 1. 如果【牌库】不为空，【弃牌库】为空，则表示为第1次施法
	if not wand.deck.is_empty() and wand.discared.is_empty():
		#TODO 标记回绕
		pass
	
	# 2. 抽取法术，得到一次施法的【施法组】
	cast_group = draw_spell()
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	if cast_group.is_empty(): 
		print(\"%s 本次抽取未抽取到法术，cast:%d，准备Idle\" % [wand.name, wand.cast])
		emit_signal(\"finished\", \"Idle\")
	else:
		print(\"%s 本次抽取到法术:[%s]，cast:%d，准备Action\" % [wand.name, cast_group, wand.cast])
		emit_signal(\"finished\", \"Cast\")

## 抽取法术
func draw_spell() -> Array[Spell]:
	var cast_group: Array[Spell] = []
	## 如果当前剩余施法数小于0，则抽取结束
	if wand.cast <= 0:
		return cast_group
	
	# 定义本次抽取次数
	var draw = 1
	while draw > 0 or not wand.deck.is_empty():
		## 尝试从【牌库】中抽取一个法术
		var spell := wand.deck.pop_front() as Spell
		draw += spell.draw_num
		draw -= 1
		cast_group.append(spell)
		
	return cast_group

func exit() -> void:
	super.exit()

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_m5hjy"]
script/source = "extends State

var wand: Wand

func _ready() -> void:
	pass

func enter() -> void:
	wand = owner as Wand
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	
func exit() -> void:
	super.exit()

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_43gfs"]
script/source = "extends State

func _ready() -> void:
	pass

func enter() -> void:
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	
func exit() -> void:
	super.exit()

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_jxwcj"]
script/source = "extends State

func _ready() -> void:
	pass

func enter() -> void:
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	
func exit() -> void:
	super.exit()

func _exit_tree() -> void:
	pass

"

[sub_resource type="GDScript" id="GDScript_w52mh"]
script/source = "extends State

func _ready() -> void:
	pass

func enter() -> void:
	super.enter()

func update(_delta: float) -> void:
	if not is_active():
		return
	
func exit() -> void:
	super.exit()

func _exit_tree() -> void:
	pass

"

[node name="Wand" type="Node2D"]
script = ExtResource("1_r2q1q")

[node name="Slots" type="Node" parent="."]

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("start_state")]
script = SubResource("GDScript_uhq8u")
start_state = NodePath("Idle")

[node name="Idle" type="Node" parent="StateMachine"]
script = SubResource("GDScript_dpm7t")

[node name="BeforeUse" type="Node" parent="StateMachine"]
script = SubResource("GDScript_om8ju")

[node name="Draw" type="Node" parent="StateMachine"]
script = SubResource("GDScript_36jsr")

[node name="Cast" type="Node" parent="StateMachine"]
script = SubResource("GDScript_m5hjy")

[node name="DelayBetweenUses" type="Node" parent="StateMachine"]
script = SubResource("GDScript_43gfs")

[node name="AfterUser" type="Node" parent="StateMachine"]
script = SubResource("GDScript_jxwcj")

[node name="Reload" type="Node" parent="StateMachine"]
script = SubResource("GDScript_w52mh")

[node name="Sprite2D" type="Sprite2D" parent="."]
